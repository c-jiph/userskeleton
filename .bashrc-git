#!/bin/bash

alias vi=vim_check
alias ls='ls --color'
alias sl='ls --color'
alias grep='grep --color=auto --exclude-dir=.svn'
alias vimg='vim +Git +only'
shopt -s checkwinsize
shopt -s histappend
export EDITOR=vim
export PROMPT_COMMAND="prompt_command"
stty -ixon

export FZF_TMUX=1
if [ -f /usr/share/fzf/shell/key-bindings.bash ] ; then
  # shellcheck source=/dev/null
  . /usr/share/fzf/shell/key-bindings.bash
elif [ -f /usr/share/doc/fzf/examples/key-bindings.bash ] ; then
  # shellcheck source=/dev/null
  . /usr/share/doc/fzf/examples/key-bindings.bash
fi

GIT_BIN="$(which git)"
alias git=git_wrapper

function git_root() {
  while [[ $# != 0 ]] ; do
    if [[ "$1" == -C && $# -gt 1 ]] ; then
        echo "$2"
        return 0
    fi
    shift
  done
  "$GIT_BIN" root
}

function git_conflicts_file() {
  local saw_file=/.git/saw-conflicts-after-rebase
  echo "$(git_root "$@")"$saw_file
}

function git_wrapper() {
  local args=("$@")
  if [[ "$*" =~ .*commit.*--amend.* ]] ; then
    local forced=0
    for ((i = 0; i < ${#args[@]}; i++)) ; do
      if [ "${args[i]}" == --force ] ; then
        forced=1
        unset 'args[i]'
        break
      fi
    done
    if [[ "$forced" == 1 ]] ; then
      rm -f "$(git_conflicts_file "$@")"
    else
      if [[ -f "$(git_conflicts_file "$@")" ]] ; then
        cat >&2 <<MSG
Recently saw conflicts during rebase, are you sure you don't want to rebase --continue?
Use --force if needed.
MSG
        return 1
      fi
    fi
  fi

  "$GIT_BIN" "${args[@]}"
  local result=$?

  if [[ "$1" == rebase ]] ; then
    if [[ "$("$GIT_BIN" -C "$(git_root "$@")" diff  --name-only --diff-filter=U | wc -l)" -gt 0 ]] ; then
      touch "$(git_conflicts_file "$@")"
    else
      rm -f "$(git_conflicts_file "$@")"
    fi
  fi

  return $result
}

function check_sudo_vim() 
{
	local reason=$1
	shift

	echo -n "$reason, use sudo? [Y/n/q]:"
	read -r response
	case $response in
		[nN])
			return 1
			;;
		[qQ])
			return 0
			;;
		*)
			sudo vim "$@"
			return 0
			;;
	esac
}

function vim_check()
{
	if [[ $# == 0 ]] && ! [ -w . ] ; then
		check_sudo_vim "Current directory is not writable" && return
	fi

	for x in "$@" ; do
		if [ -d "$x" ] ; then
			continue
		fi

		if [ -e "$x" ] ; then 
			if ! [ -w "$x" ] ; then
				check_sudo_vim "File '$x' is not writable" "$@" && return
			fi
		else
			if ! [ -w . ] ; then
				check_sudo_vim "File '$x' does not exist and current directory is not writable" "$@" && return
			fi
		fi
	done

	vim "$@"
}

#WHITE="\[\033[1;37m\]"
#PURPLE="\[\033[0;35m\]"
#YELLOW="\[\033[1;33m\]"
#CYAN="\[\033[1;36m\]"

function prompt_command
{
	if [ -z "$PROMPT_COLOUR" ] ; then
		PROMPT_COLOUR="\[\033[1;35m\]"
	fi
        NO_COLOUR="\[\033[0m\]"
        CYAN="\[\033[1;36m\]"

        COORDINDATES="${USER}@${HOSTNAME}:${PWD}"
        COORDLEN=${#COORDINDATES}
        FILL=$((COLUMNS - COORDLEN - 1))
        COORDINDATES="${CYAN}${COORDINDATES}"
        if [[ "$FILL" -gt 4 ]] ; then
                COORDINDATESLINE="${PROMPT_COLOUR}-{${COORDINDATES}${PROMPT_COLOUR}}"
                while [ "$FILL" -gt 2 ] ; do
                        COORDINDATESLINE=${COORDINDATESLINE}-
                        FILL=$((FILL - 1))
                done
        else
                COORDINDATESLINE=$COORDINDATES
        fi
	case $TERM in
        	xterm*)
			IFS='/' read -ra PWD_ARRAY <<< "$PWD"
			BACKWARDS_CORDS=""
			for((i=${#PWD_ARRAY[@]}-1;i>0;i--)); do
				BACKWARDS_CORDS="$BACKWARDS_CORDS${PWD_ARRAY[$i]}/"
			done
			BACKWARDS_CORDS="$BACKWARDS_CORDS:$HOSTNAME@$USER"
			TITLEBAR="\[\033]0;$BACKWARDS_CORDS\007\]"
        	;;
        	*)
                	TITLEBAR=""
        	;;
	esac
        export PS1="${TITLEBAR}\n${COORDINDATESLINE}\n${NO_COLOUR}\\$ "
        history -a
}

if [ "$TERM" = xterm ] ; then
	export TERM=xterm-256color
fi

